=== tests/cases/compiler/writerOptionalIndentation.ts ===
import ts = require("typescript");
>ts : typeof ts

declare var process: any;
>process : any

type ExpectedResults = {
>ExpectedResults : { [indentation: string]: { expected: string; writer?: ts.Printer | undefined; }; [indentation: number]: { expected: string; writer?: ts.Printer | undefined; }; }

    [indentation: string | number]: {
>indentation : string | number

        expected: string;
>expected : string

        writer?: ts.Printer;
>writer : ts.Printer | undefined
>ts : any
    }
}

const nl = ts.sys.newLine;
>nl : string
>ts.sys.newLine : string
>ts.sys : ts.System
>ts : typeof ts
>sys : ts.System
>newLine : string

const expectedResults: ExpectedResults = {
>expectedResults : ExpectedResults
>{    0: {expected: `export function abc(): string {${nl}let abc: string = \"abc\";${nl}return abc;${nl}}${nl}`},    1: {expected: `export function abc(): string {${nl} let abc: string = \"abc\";${nl} return abc;${nl}}${nl}`},    2: {expected: `export function abc(): string {${nl}  let abc: string = \"abc\";${nl}  return abc;${nl}}${nl}`},    3: {expected: `export function abc(): string {${nl}   let abc: string = \"abc\";${nl}   return abc;${nl}}${nl}`},    4: {expected: `export function abc(): string {${nl}    let abc: string = \"abc\";${nl}    return abc;${nl}}${nl}`},    5: {expected: `export function abc(): string {${nl}     let abc: string = \"abc\";${nl}     return abc;${nl}}${nl}`},    6: {expected: `export function abc(): string {${nl}      let abc: string = \"abc\";${nl}      return abc;${nl}}${nl}`},    7: {expected: `export function abc(): string {${nl}       let abc: string = \"abc\";${nl}       return abc;${nl}}${nl}`},    8: {expected: `export function abc(): string {${nl}        let abc: string = \"abc\";${nl}        return abc;${nl}}${nl}`},    9: {expected: `export function abc(): string {${nl}         let abc: string = \"abc\";${nl}         return abc;${nl}}${nl}`},    "\t": {expected: `export function abc(): string {${nl}\tlet abc: string = \"abc\";${nl}\treturn abc;${nl}}${nl}`}} : { 0: { expected: string; }; 1: { expected: string; }; 2: { expected: string; }; 3: { expected: string; }; 4: { expected: string; }; 5: { expected: string; }; 6: { expected: string; }; 7: { expected: string; }; 8: { expected: string; }; 9: { expected: string; }; "\t": { expected: string; }; }

    0: {expected: `export function abc(): string {${nl}let abc: string = \"abc\";${nl}return abc;${nl}}${nl}`},
>0 : { expected: string; }
>{expected: `export function abc(): string {${nl}let abc: string = \"abc\";${nl}return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}let abc: string = \"abc\";${nl}return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    1: {expected: `export function abc(): string {${nl} let abc: string = \"abc\";${nl} return abc;${nl}}${nl}`},
>1 : { expected: string; }
>{expected: `export function abc(): string {${nl} let abc: string = \"abc\";${nl} return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl} let abc: string = \"abc\";${nl} return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    2: {expected: `export function abc(): string {${nl}  let abc: string = \"abc\";${nl}  return abc;${nl}}${nl}`},
>2 : { expected: string; }
>{expected: `export function abc(): string {${nl}  let abc: string = \"abc\";${nl}  return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}  let abc: string = \"abc\";${nl}  return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    3: {expected: `export function abc(): string {${nl}   let abc: string = \"abc\";${nl}   return abc;${nl}}${nl}`},
>3 : { expected: string; }
>{expected: `export function abc(): string {${nl}   let abc: string = \"abc\";${nl}   return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}   let abc: string = \"abc\";${nl}   return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    4: {expected: `export function abc(): string {${nl}    let abc: string = \"abc\";${nl}    return abc;${nl}}${nl}`},
>4 : { expected: string; }
>{expected: `export function abc(): string {${nl}    let abc: string = \"abc\";${nl}    return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}    let abc: string = \"abc\";${nl}    return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    5: {expected: `export function abc(): string {${nl}     let abc: string = \"abc\";${nl}     return abc;${nl}}${nl}`},
>5 : { expected: string; }
>{expected: `export function abc(): string {${nl}     let abc: string = \"abc\";${nl}     return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}     let abc: string = \"abc\";${nl}     return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    6: {expected: `export function abc(): string {${nl}      let abc: string = \"abc\";${nl}      return abc;${nl}}${nl}`},
>6 : { expected: string; }
>{expected: `export function abc(): string {${nl}      let abc: string = \"abc\";${nl}      return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}      let abc: string = \"abc\";${nl}      return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    7: {expected: `export function abc(): string {${nl}       let abc: string = \"abc\";${nl}       return abc;${nl}}${nl}`},
>7 : { expected: string; }
>{expected: `export function abc(): string {${nl}       let abc: string = \"abc\";${nl}       return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}       let abc: string = \"abc\";${nl}       return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    8: {expected: `export function abc(): string {${nl}        let abc: string = \"abc\";${nl}        return abc;${nl}}${nl}`},
>8 : { expected: string; }
>{expected: `export function abc(): string {${nl}        let abc: string = \"abc\";${nl}        return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}        let abc: string = \"abc\";${nl}        return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    9: {expected: `export function abc(): string {${nl}         let abc: string = \"abc\";${nl}         return abc;${nl}}${nl}`},
>9 : { expected: string; }
>{expected: `export function abc(): string {${nl}         let abc: string = \"abc\";${nl}         return abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}         let abc: string = \"abc\";${nl}         return abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

    "\t": {expected: `export function abc(): string {${nl}\tlet abc: string = \"abc\";${nl}\treturn abc;${nl}}${nl}`}
>"\t" : { expected: string; }
>{expected: `export function abc(): string {${nl}\tlet abc: string = \"abc\";${nl}\treturn abc;${nl}}${nl}`} : { expected: string; }
>expected : string
>`export function abc(): string {${nl}\tlet abc: string = \"abc\";${nl}\treturn abc;${nl}}${nl}` : string
>nl : string
>nl : string
>nl : string
>nl : string

};

export function testWriterOptionalIndentation(): void {
>testWriterOptionalIndentation : () => void

    let exitCode = 0;
>exitCode : number
>0 : 0

    function createPrinterInstance(indentation: number | "\t"): void {
>createPrinterInstance : (indentation: number | "\t") => void
>indentation : number | "\t"

        expectedResults[indentation].writer = ts.createPrinter({ indentation } as ts.PrinterOptions);
>expectedResults[indentation].writer = ts.createPrinter({ indentation } as ts.PrinterOptions) : ts.Printer
>expectedResults[indentation].writer : ts.Printer | undefined
>expectedResults[indentation] : { expected: string; writer?: ts.Printer | undefined; }
>expectedResults : ExpectedResults
>indentation : number | "\t"
>writer : ts.Printer | undefined
>ts.createPrinter({ indentation } as ts.PrinterOptions) : ts.Printer
>ts.createPrinter : (printerOptions?: ts.PrinterOptions | undefined, handlers?: ts.PrintHandlers | undefined) => ts.Printer
>ts : typeof ts
>createPrinter : (printerOptions?: ts.PrinterOptions | undefined, handlers?: ts.PrintHandlers | undefined) => ts.Printer
>{ indentation } as ts.PrinterOptions : ts.PrinterOptions
>{ indentation } : { indentation: number | "\t"; }
>indentation : number | "\t"
>ts : any
    }

    function testIndentation(indentation?: number | "\t"): void {
>testIndentation : (indentation?: number | "\t") => void
>indentation : number | "\t" | undefined

        let workIndentationSize: string = "" + indentation;
>workIndentationSize : string
>"" + indentation : string
>"" : ""
>indentation : number | "\t" | undefined

        if (indentation === undefined) {
>indentation === undefined : boolean
>indentation : number | "\t" | undefined
>undefined : undefined

            indentation = 4;
>indentation = 4 : 4
>indentation : number | "\t" | undefined
>4 : 4

            workIndentationSize = "<default>";
>workIndentationSize = "<default>" : "<default>"
>workIndentationSize : string
>"<default>" : "<default>"
        }
        let printer = expectedResults[indentation].writer;
>printer : ts.Printer | undefined
>expectedResults[indentation].writer : ts.Printer | undefined
>expectedResults[indentation] : { expected: string; writer?: ts.Printer | undefined; }
>expectedResults : ExpectedResults
>indentation : number | "\t"
>writer : ts.Printer | undefined

        if (!printer) {
>!printer : boolean
>printer : ts.Printer | undefined

            console.error("Unable to find a writer for:" + typeof indentation + " " + indentation);
>console.error("Unable to find a writer for:" + typeof indentation + " " + indentation) : void
>console.error : (...data: any[]) => void
>console : Console
>error : (...data: any[]) => void
>"Unable to find a writer for:" + typeof indentation + " " + indentation : string
>"Unable to find a writer for:" + typeof indentation + " " : string
>"Unable to find a writer for:" + typeof indentation : string
>"Unable to find a writer for:" : "Unable to find a writer for:"
>typeof indentation : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>indentation : number | "\t"
>" " : " "
>indentation : number | "\t"

            exitCode = 9;
>exitCode = 9 : 9
>exitCode : number
>9 : 9

            return;
        }
        let result = printer.printNode(ts.EmitHint.Unspecified, sourceFile, sourceFile);
>result : string
>printer.printNode(ts.EmitHint.Unspecified, sourceFile, sourceFile) : string
>printer.printNode : (hint: ts.EmitHint, node: ts.Node, sourceFile: ts.SourceFile) => string
>printer : ts.Printer
>printNode : (hint: ts.EmitHint, node: ts.Node, sourceFile: ts.SourceFile) => string
>ts.EmitHint.Unspecified : ts.EmitHint.Unspecified
>ts.EmitHint : typeof ts.EmitHint
>ts : typeof ts
>EmitHint : typeof ts.EmitHint
>Unspecified : ts.EmitHint.Unspecified
>sourceFile : ts.SourceFile
>sourceFile : ts.SourceFile

        if (result !== expectedResults[indentation].expected) {
>result !== expectedResults[indentation].expected : boolean
>result : string
>expectedResults[indentation].expected : string
>expectedResults[indentation] : { expected: string; writer?: ts.Printer | undefined; }
>expectedResults : ExpectedResults
>indentation : number | "\t"
>expected : string

            workIndentationSize = indentation === undefined ? "<default>" : "" + indentation;
>workIndentationSize = indentation === undefined ? "<default>" : "" + indentation : string
>workIndentationSize : string
>indentation === undefined ? "<default>" : "" + indentation : string
>indentation === undefined : boolean
>indentation : number | "\t"
>undefined : undefined
>"<default>" : "<default>"
>"" + indentation : string
>"" : ""
>indentation : number | "\t"

            console.error(`writerOptionalIndentation - Failed indentation for >>${workIndentationSize}<<${nl}Expected:-${nl}${expectedResults[indentation].expected}${nl}Have:-${nl}${result}`);
>console.error(`writerOptionalIndentation - Failed indentation for >>${workIndentationSize}<<${nl}Expected:-${nl}${expectedResults[indentation].expected}${nl}Have:-${nl}${result}`) : void
>console.error : (...data: any[]) => void
>console : Console
>error : (...data: any[]) => void
>`writerOptionalIndentation - Failed indentation for >>${workIndentationSize}<<${nl}Expected:-${nl}${expectedResults[indentation].expected}${nl}Have:-${nl}${result}` : string
>workIndentationSize : string
>nl : string
>nl : string
>expectedResults[indentation].expected : string
>expectedResults[indentation] : { expected: string; writer?: ts.Printer | undefined; }
>expectedResults : ExpectedResults
>indentation : number | "\t"
>expected : string
>nl : string
>nl : string
>result : string

            exitCode = 9;
>exitCode = 9 : 9
>exitCode : number
>9 : 9

            return;
        }
    }

    let sourceFile = ts.createSourceFile(
>sourceFile : ts.SourceFile
>ts.createSourceFile(        "writerOptionalIndentationTest.ts",        `        export     function abc (   )    :            string            {            let abc :   string   =    "abc";        return     abc            }        `,        ts.ScriptTarget.ESNext    ) : ts.SourceFile
>ts.createSourceFile : (fileName: string, sourceText: string, languageVersionOrOptions: ts.ScriptTarget | ts.CreateSourceFileOptions, setParentNodes?: boolean | undefined, scriptKind?: ts.ScriptKind | undefined) => ts.SourceFile
>ts : typeof ts
>createSourceFile : (fileName: string, sourceText: string, languageVersionOrOptions: ts.ScriptTarget | ts.CreateSourceFileOptions, setParentNodes?: boolean | undefined, scriptKind?: ts.ScriptKind | undefined) => ts.SourceFile

        "writerOptionalIndentationTest.ts",
>"writerOptionalIndentationTest.ts" : "writerOptionalIndentationTest.ts"

        `
>`        export     function abc (   )    :            string            {            let abc :   string   =    "abc";        return     abc            }        ` : "\n        export \n    function abc (   )    :\n            string\n            {\n            let abc :   string   =    \"abc\";\n        return     abc\n            }\n        "

        export 
    function abc (   )    :
            string
            {
            let abc :   string   =    "abc";
        return     abc
            }
        `,
        ts.ScriptTarget.ESNext
>ts.ScriptTarget.ESNext : ts.ScriptTarget.ESNext
>ts.ScriptTarget : typeof ts.ScriptTarget
>ts : typeof ts
>ScriptTarget : typeof ts.ScriptTarget
>ESNext : ts.ScriptTarget.ESNext

    );

    for (let indentation in expectedResults) {
>indentation : string
>expectedResults : ExpectedResults

        let test = parseInt(indentation + 1);
>test : number
>parseInt(indentation + 1) : number
>parseInt : (string: string, radix?: number | undefined) => number
>indentation + 1 : string
>indentation : string
>1 : 1

        if (test > 0) {
>test > 0 : boolean
>test : number
>0 : 0

            createPrinterInstance(test - 1);
>createPrinterInstance(test - 1) : void
>createPrinterInstance : (indentation: number | "\t") => void
>test - 1 : number
>test : number
>1 : 1
        }
        else if (indentation === "\t") {
>indentation === "\t" : boolean
>indentation : string
>"\t" : "\t"

            createPrinterInstance(indentation);
>createPrinterInstance(indentation) : void
>createPrinterInstance : (indentation: number | "\t") => void
>indentation : "\t"
        }
    }

    testIndentation(); //... testing with no indentation set - should use default of 4 spaces
>testIndentation() : void
>testIndentation : (indentation?: number | "\t" | undefined) => void

    for (let indentation in expectedResults) {
>indentation : string
>expectedResults : ExpectedResults

        let test = parseInt(indentation + 1);
>test : number
>parseInt(indentation + 1) : number
>parseInt : (string: string, radix?: number | undefined) => number
>indentation + 1 : string
>indentation : string
>1 : 1

        if (test > 0) {
>test > 0 : boolean
>test : number
>0 : 0

            testIndentation(test - 1);
>testIndentation(test - 1) : void
>testIndentation : (indentation?: number | "\t" | undefined) => void
>test - 1 : number
>test : number
>1 : 1
        }
        else if (indentation === "\t") {
>indentation === "\t" : boolean
>indentation : string
>"\t" : "\t"

            testIndentation(indentation);
>testIndentation(indentation) : void
>testIndentation : (indentation?: number | "\t" | undefined) => void
>indentation : "\t"
        }
    }
    console.log(`Process exiting with code '${exitCode}'.`);
>console.log(`Process exiting with code '${exitCode}'.`) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>`Process exiting with code '${exitCode}'.` : string
>exitCode : number

    process.exit(exitCode);
>process.exit(exitCode) : any
>process.exit : any
>process : any
>exit : any
>exitCode : number
}

testWriterOptionalIndentation();
>testWriterOptionalIndentation() : void
>testWriterOptionalIndentation : () => void

