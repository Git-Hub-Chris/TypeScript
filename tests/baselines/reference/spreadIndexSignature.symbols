//// [tests/cases/compiler/spreadIndexSignature.ts] ////

=== spreadIndexSignature.ts ===
declare const strings: Record<string, string>;
>strings : Symbol(strings, Decl(spreadIndexSignature.ts, 0, 13))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

declare const symbols: Record<symbol, string>;
>symbols : Symbol(symbols, Decl(spreadIndexSignature.ts, 1, 13))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

const o1 = { a: 1, ...strings };
>o1 : Symbol(o1, Decl(spreadIndexSignature.ts, 3, 5))
>a : Symbol(a, Decl(spreadIndexSignature.ts, 3, 12))
>strings : Symbol(strings, Decl(spreadIndexSignature.ts, 0, 13))

const o2 = { [Symbol.iterator]: 1, ...strings };
>o2 : Symbol(o2, Decl(spreadIndexSignature.ts, 4, 5))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(spreadIndexSignature.ts, 4, 12))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2019.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>strings : Symbol(strings, Decl(spreadIndexSignature.ts, 0, 13))

const o3 = { [Symbol.iterator]: 1, ...symbols };
>o3 : Symbol(o3, Decl(spreadIndexSignature.ts, 5, 5))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(spreadIndexSignature.ts, 5, 12))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2019.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>symbols : Symbol(symbols, Decl(spreadIndexSignature.ts, 1, 13))

