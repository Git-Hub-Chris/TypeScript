=== tests/cases/compiler/self-types-state-machine.ts ===
type StateMachine =
>StateMachine : StateMachine

  { [S in keyof self]: { [E in keyof self[S]]: keyof self } }

let trafficLights: StateMachine = {
>trafficLights : StateMachine
>{  off: {    ON: "red"  },  red: {    TICK: "yellow",    OFF: "off"  },  yellow: {    TICK: "green",    OFF: "off"  },  green: {    TICK: "reddd",    OFF: "off"  }} : { off: { ON: "red"; }; red: { TICK: "yellow"; OFF: "off"; }; yellow: { TICK: "green"; OFF: "off"; }; green: { TICK: "reddd"; OFF: "off"; }; }

  off: {
>off : { ON: "red"; }
>{    ON: "red"  } : { ON: "red"; }

    ON: "red"
>ON : "red"
>"red" : "red"

  },
  red: {
>red : { TICK: "yellow"; OFF: "off"; }
>{    TICK: "yellow",    OFF: "off"  } : { TICK: "yellow"; OFF: "off"; }

    TICK: "yellow",
>TICK : "yellow"
>"yellow" : "yellow"

    OFF: "off"
>OFF : "off"
>"off" : "off"

  },
  yellow: {
>yellow : { TICK: "green"; OFF: "off"; }
>{    TICK: "green",    OFF: "off"  } : { TICK: "green"; OFF: "off"; }

    TICK: "green",
>TICK : "green"
>"green" : "green"

    OFF: "off"
>OFF : "off"
>"off" : "off"

  },
  green: {
>green : { TICK: "reddd"; OFF: "off"; }
>{    TICK: "reddd",    OFF: "off"  } : { TICK: "reddd"; OFF: "off"; }

    TICK: "reddd",
>TICK : "reddd"
>"reddd" : "reddd"

    OFF: "off"
>OFF : "off"
>"off" : "off"
  }
}
