=== tests/cases/compiler/self-types-case-insensitive.ts ===
type CaseInsensitive<T extends string> =
>CaseInsensitive : CaseInsensitive<T>

  self extends string
    ? Lowercase<self> extends Lowercase<T>
        ? self
        : Never<[
          `Type '${Print<self>}' is not assignable to type 'CaseInsensitive<${Print<T>}>'`,
          `Type 'Lowercase<${Print<self>}>' is not assignable to 'Lowercase<${Print<T>}>'`,
          `Type '${Print<Lowercase<self>>}' is not assignable to '${Print<Lowercase<T>>}'`
        ]>
    : T

declare const setHeader: 
>setHeader : (key: CaseInsensitive<"Set-Cookie" | "Accept">, value: string) => void

  (key: CaseInsensitive<"Set-Cookie" | "Accept">, value: string) => void
>key : CaseInsensitive<"Set-Cookie" | "Accept">
>value : string

setHeader("Set-Cookie", "test")
>setHeader("Set-Cookie", "test") : void
>setHeader : (key: CaseInsensitive<"Set-Cookie" | "Accept">, value: string) => void
>"Set-Cookie" : "Set-Cookie"
>"test" : "test"

setHeader("Accept", "test2")
>setHeader("Accept", "test2") : void
>setHeader : (key: CaseInsensitive<"Set-Cookie" | "Accept">, value: string) => void
>"Accept" : "Accept"
>"test2" : "test2"

setHeader("sEt-cOoKiE", "stop writing headers like this but ok")
>setHeader("sEt-cOoKiE", "stop writing headers like this but ok") : void
>setHeader : (key: CaseInsensitive<"Set-Cookie" | "Accept">, value: string) => void
>"sEt-cOoKiE" : "sEt-cOoKiE"
>"stop writing headers like this but ok" : "stop writing headers like this but ok"

setHeader("Acept", "nah this has a typo")
>setHeader("Acept", "nah this has a typo") : void
>setHeader : (key: CaseInsensitive<"Set-Cookie" | "Accept">, value: string) => void
>"Acept" : "Acept"
>"nah this has a typo" : "nah this has a typo"

// TODO?: the autocompletion doesn't work, although it could be doable by
// instantiating `self` with `unknown`, at least in this case.
// Or by an alternative definition...
// type CaseInsensitive<T extends string> = T | [existing-defintion]
// the autocompletion works now but the custom error message doesn't
// get shown

type Headers =
>Headers : { [P in CaseInsensitive<"set-cookie" | "accept">]: string; }

  Record<CaseInsensitive<"set-cookie" | "accept">, string>

let headers: Headers = {
>headers : Headers
>{  // TODO: this is not an excess property, should compile  "Set-Cookie": "test"} : { "Set-Cookie": string; }

  // TODO: this is not an excess property, should compile
  "Set-Cookie": "test"
>"Set-Cookie" : string
>"test" : "test"
}

export {}
