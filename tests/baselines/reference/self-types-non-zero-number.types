=== tests/cases/compiler/self-types-non-zero-number.ts ===
type NonZeroNumber =
>NonZeroNumber : NonZeroNumber

  self extends number
    ? self extends 0
        ? Never<`Type '${Print<self>}' is not assignable to type 'NonZeroNumber'`>
        : self
    : number

const divide = (a: number, b: NonZeroNumber) => (a / (b as number)) as NonZeroNumber
>divide : (a: number, b: NonZeroNumber) => NonZeroNumber
>(a: number, b: NonZeroNumber) => (a / (b as number)) as NonZeroNumber : (a: number, b: NonZeroNumber) => NonZeroNumber
>a : number
>b : NonZeroNumber
>(a / (b as number)) as NonZeroNumber : NonZeroNumber
>(a / (b as number)) : number
>a / (b as number) : number
>a : number
>(b as number) : number
>b as number : number
>b : NonZeroNumber

divide(1, 0)
>divide(1, 0) : NonZeroNumber
>divide : (a: number, b: NonZeroNumber) => NonZeroNumber
>1 : 1
>0 : 0

divide(1, 1)
>divide(1, 1) : NonZeroNumber
>divide : (a: number, b: NonZeroNumber) => NonZeroNumber
>1 : 1
>1 : 1

divide(1, "x")
>divide(1, "x") : NonZeroNumber
>divide : (a: number, b: NonZeroNumber) => NonZeroNumber
>1 : 1
>"x" : "x"

export {}
