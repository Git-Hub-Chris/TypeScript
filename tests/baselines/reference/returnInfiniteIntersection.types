=== tests/cases/compiler/returnInfiniteIntersection.ts ===
function recursive() {
>recursive : () => type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }

    let x = <T>(subkey: T) => recursive();
>x : type Anon = <T>(subkey: T) => Anon & { p: any; }
><T>(subkey: T) => recursive() : type Anon = <T>(subkey: T) => Anon & { p: any; }
>subkey : T
>recursive() : type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }
>recursive : () => type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }

    return x as typeof x & { p };
>x as typeof x & { p } : type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }
>x : type Anon = <T>(subkey: T) => Anon & { p: any; }
>x : type Anon = <T>(subkey: T) => Anon & { p: any; }
>p : any
}

let result = recursive()(1)
>result : type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }
>recursive()(1) : type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }
>recursive() : type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }
>recursive : () => type Anon = <T>(subkey: T) => Anon & { p: any; } & { p: any; }
>1 : 1

