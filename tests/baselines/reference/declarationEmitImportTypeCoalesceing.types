=== tests/cases/compiler/whole.d.ts ===
declare namespace thing {
>thing : typeof thing

    export const a = 1;
>a : 1
>1 : 1

    export interface A {}
    export function getNs(): typeof thing;
>getNs : () => typeof thing
>thing : typeof thing
}
export = thing;
>thing : typeof thing

=== tests/cases/compiler/types.d.ts ===
export interface A {}
export interface B<T> {}
export interface C {}

export declare function getA(): A;
>getA : () => A

export declare function getB(): B<C>;
>getB : () => B<C>

export declare function getC(): C;
>getC : () => C

=== tests/cases/compiler/index.ts ===
import { getA, getB } from "./types";
>getA : () => import("tests/cases/compiler/types").A
>getB : () => import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>

import { getNs } from "./whole";
>getNs : () => typeof import("tests/cases/compiler/whole")

export const a1 = getA();
>a1 : import("tests/cases/compiler/types").A
>getA() : import("tests/cases/compiler/types").A
>getA : () => import("tests/cases/compiler/types").A

export const a2 = [getA()];
>a2 : import("tests/cases/compiler/types").A[]
>[getA()] : import("tests/cases/compiler/types").A[]
>getA() : import("tests/cases/compiler/types").A
>getA : () => import("tests/cases/compiler/types").A

export const a3 = { a: getA() };
>a3 : { a: import("tests/cases/compiler/types").A; }
>{ a: getA() } : { a: import("tests/cases/compiler/types").A; }
>a : import("tests/cases/compiler/types").A
>getA() : import("tests/cases/compiler/types").A
>getA : () => import("tests/cases/compiler/types").A

export const b1 = getB();
>b1 : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>
>getB() : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>
>getB : () => import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>

export const b2 = [getB()];
>b2 : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>[]
>[getB()] : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>[]
>getB() : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>
>getB : () => import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>

export const b3 = { a: getB() };
>b3 : { a: import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>; }
>{ a: getB() } : { a: import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>; }
>a : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>
>getB() : import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>
>getB : () => import("tests/cases/compiler/types").B<import("tests/cases/compiler/types").C>

export const ns1 = getNs();
>ns1 : typeof import("tests/cases/compiler/whole")
>getNs() : typeof import("tests/cases/compiler/whole")
>getNs : () => typeof import("tests/cases/compiler/whole")

export const ns2 = [getNs()];
>ns2 : typeof import("tests/cases/compiler/whole")[]
>[getNs()] : typeof import("tests/cases/compiler/whole")[]
>getNs() : typeof import("tests/cases/compiler/whole")
>getNs : () => typeof import("tests/cases/compiler/whole")

export const ns3 = { a: getNs() };
>ns3 : { a: typeof import("tests/cases/compiler/whole"); }
>{ a: getNs() } : { a: typeof import("tests/cases/compiler/whole"); }
>a : typeof import("tests/cases/compiler/whole")
>getNs() : typeof import("tests/cases/compiler/whole")
>getNs : () => typeof import("tests/cases/compiler/whole")

