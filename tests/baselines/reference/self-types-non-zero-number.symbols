=== tests/cases/compiler/self-types-non-zero-number.ts ===
type NonZeroNumber =
>NonZeroNumber : Symbol(NonZeroNumber, Decl(self-types-non-zero-number.ts, 0, 0))

  self extends number
    ? self extends 0
        ? Never<`Type '${Print<self>}' is not assignable to type 'NonZeroNumber'`>
>Never : Symbol(Never, Decl(lib.es5.d.ts, --, --))
>Print : Symbol(Print, Decl(lib.es5.d.ts, --, --))

        : self
    : number

const divide = (a: number, b: NonZeroNumber) => (a / (b as number)) as NonZeroNumber
>divide : Symbol(divide, Decl(self-types-non-zero-number.ts, 7, 5))
>a : Symbol(a, Decl(self-types-non-zero-number.ts, 7, 16))
>b : Symbol(b, Decl(self-types-non-zero-number.ts, 7, 26))
>NonZeroNumber : Symbol(NonZeroNumber, Decl(self-types-non-zero-number.ts, 0, 0))
>a : Symbol(a, Decl(self-types-non-zero-number.ts, 7, 16))
>b : Symbol(b, Decl(self-types-non-zero-number.ts, 7, 26))
>NonZeroNumber : Symbol(NonZeroNumber, Decl(self-types-non-zero-number.ts, 0, 0))

divide(1, 0)
>divide : Symbol(divide, Decl(self-types-non-zero-number.ts, 7, 5))

divide(1, 1)
>divide : Symbol(divide, Decl(self-types-non-zero-number.ts, 7, 5))

divide(1, "x")
>divide : Symbol(divide, Decl(self-types-non-zero-number.ts, 7, 5))

export {}
