=== tests/cases/conformance/types/thisType/thisTypeInTuples.ts ===
interface ReadonlyArray<T> {
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 0))
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 24))

    slice(): this;
>slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))
}

let t: [number, string] = [42, "hello"];
>t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))

let a = t.slice();
>a : Symbol(a, Decl(thisTypeInTuples.ts, 5, 3))
>t.slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))
>t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))
>slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))

let b = t.slice(1);
>b : Symbol(b, Decl(thisTypeInTuples.ts, 6, 3))
>t.slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))
>t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))
>slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))

let c = t.slice(0, 1);
>c : Symbol(c, Decl(thisTypeInTuples.ts, 7, 3))
>t.slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))
>t : Symbol(t, Decl(thisTypeInTuples.ts, 4, 3))
>slice : Symbol(ReadonlyArray.slice, Decl(lib.es5.d.ts, --, --), Decl(thisTypeInTuples.ts, 0, 28))

