unionTypeExcessPropertyCheck.ts(11,9): error TS2322: Type '{ b: string; c: string; }' is not assignable to type 'AC'.
  Object literal may only specify known properties, and 'b' does not exist in type 'AC'.
unionTypeExcessPropertyCheck.ts(17,9): error TS2322: Type '{ b: string; c: string; }' is not assignable to type 'B'.
  Object literal may only specify known properties, and 'c' does not exist in type 'B'.
unionTypeExcessPropertyCheck.ts(27,5): error TS2322: Type '{ b: string; x: string; }' is not assignable to type 'AC | B'.
  Object literal may only specify known properties, and 'x' does not exist in type 'AC | B'.
    Excess properties detected in Object literal '{ b: string; x: string; }' combination of properties '[object Object]' make type 'AC | B' undeducible
unionTypeExcessPropertyCheck.ts(33,5): error TS2322: Type '{ a: string; c: string; x: string; }' is not assignable to type 'AC | B'.
  Object literal may only specify known properties, and 'x' does not exist in type 'AC | B'.
    Excess properties detected in Object literal '{ a: string; c: string; x: string; }' combination of properties '[object Object], [object Object]' make type 'AC | B' undeducible


==== unionTypeExcessPropertyCheck.ts (4 errors) ====
    type AC = {
        a: string, 
        c: string
    };
    type B = {
        b: string
    };
    
    // Fails correctly as `b` is not in `AC`
    const ac_b: AC = {
            b: '',
            ~
!!! error TS2322: Type '{ b: string; c: string; }' is not assignable to type 'AC'.
!!! error TS2322:   Object literal may only specify known properties, and 'b' does not exist in type 'AC'.
            c: ''
    };
    // Fails correctly as `c` is not in `B`
    const b_c: B = {
            b: '',
            c: ''
            ~
!!! error TS2322: Type '{ b: string; c: string; }' is not assignable to type 'B'.
!!! error TS2322:   Object literal may only specify known properties, and 'c' does not exist in type 'B'.
    };
    // Should fail because `c` is not in `B` while `b` is not in `AB`, but works instead
    const acb_bc: AC|B = {
            b: '',
            c: ''
    };
    // Fails correctly as `x` in in neither `AC` nor `B`
    const acb_bx: AC|B = {
        b: '',
        x: ''
        ~
!!! error TS2322: Type '{ b: string; x: string; }' is not assignable to type 'AC | B'.
!!! error TS2322:   Object literal may only specify known properties, and 'x' does not exist in type 'AC | B'.
!!! error TS2322:     Excess properties detected in Object literal '{ b: string; x: string; }' combination of properties '[object Object]' make type 'AC | B' undeducible
    };
    // Fails correctly as `x` in in neither `AC` nor `B`
    const acb_acx: AC|B = {
        a: '',
        c: '',
        x: ''
        ~
!!! error TS2322: Type '{ a: string; c: string; x: string; }' is not assignable to type 'AC | B'.
!!! error TS2322:   Object literal may only specify known properties, and 'x' does not exist in type 'AC | B'.
!!! error TS2322:     Excess properties detected in Object literal '{ a: string; c: string; x: string; }' combination of properties '[object Object], [object Object]' make type 'AC | B' undeducible
    };
    