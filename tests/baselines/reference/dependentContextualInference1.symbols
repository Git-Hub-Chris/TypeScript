=== tests/cases/compiler/dependentContextualInference1.ts ===
declare const f:
>f : Symbol(f, Decl(dependentContextualInference1.ts, 0, 13))

  <T extends F<T>>(t: T) => T
>T : Symbol(T, Decl(dependentContextualInference1.ts, 1, 3))
>F : Symbol(F, Decl(dependentContextualInference1.ts, 1, 29))
>T : Symbol(T, Decl(dependentContextualInference1.ts, 1, 3))
>t : Symbol(t, Decl(dependentContextualInference1.ts, 1, 19))
>T : Symbol(T, Decl(dependentContextualInference1.ts, 1, 3))
>T : Symbol(T, Decl(dependentContextualInference1.ts, 1, 3))

type F<T> =
>F : Symbol(F, Decl(dependentContextualInference1.ts, 1, 29))
>T : Symbol(T, Decl(dependentContextualInference1.ts, 3, 7))

  { a: unknown
>a : Symbol(a, Decl(dependentContextualInference1.ts, 4, 3))

  , b: (a: T["a" & keyof T]) => unknown
>b : Symbol(b, Decl(dependentContextualInference1.ts, 5, 3))
>a : Symbol(a, Decl(dependentContextualInference1.ts, 5, 8))
>T : Symbol(T, Decl(dependentContextualInference1.ts, 3, 7))
>T : Symbol(T, Decl(dependentContextualInference1.ts, 3, 7))
  }

f({
>f : Symbol(f, Decl(dependentContextualInference1.ts, 0, 13))

  a: "hello",
>a : Symbol(a, Decl(dependentContextualInference1.ts, 8, 3))

  b: x => x.toUpperCase()
>b : Symbol(b, Decl(dependentContextualInference1.ts, 9, 13))
>x : Symbol(x, Decl(dependentContextualInference1.ts, 10, 4))
>x.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(dependentContextualInference1.ts, 10, 4))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))

})

